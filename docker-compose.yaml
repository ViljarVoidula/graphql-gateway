volumes:
  postgres_data:
    name: postgres_data
  minio:
    name: minio_data
  redis:
    name: redis_data
  mongo-data:
    name: mongo_data
  mongo-config:
    name: mongo_config

networks:
  gateway_net:
    name: gateway_net
    driver: bridge

services:
  postgres:
    image: bitnami/postgresql:17.5.0
    container_name: postgres
    restart: always
    ports:
      - 10432:5432
    shm_size: 2gb
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      DB_EXTENSION: 'uuid-ossp'
      POSTGRES_DB: gateway
      POSTGRESQL_MAX_CONNECTIONS: 250
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gateway_net
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181 # Changed from 2181:2181 to 22181:2181
    networks:
      - gateway_net
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_PROCESS_ROLES: broker
      KAFKA_BROKER_ID: 1
      CLUSTER_ID: test-cluster
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - gateway_net
  mongo:
    image: mongo:8.0
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db # Persist MongoDB data
      - mongo-config:/data/configdb # Persist MongoDB configuration
    networks:
      - gateway_net
  redis:
    container_name: gateway-redis
    image: redis:7.4.1-alpine
    restart: always
    ports:
      - '26379:6379' # Changed from 16379 to 26379
    volumes:
      - redis:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    networks:
      - gateway_net

  vespa:
    image: vespaengine/vespa:8.578.22
    container_name: vespa
    hostname: vespa-container
    ports:
      - '8100:8080' # query / document API
      - '19071:19071' # config / deploy API
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:19071/state/v1/health']
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - gateway_net
  minio:
    image: minio/minio:RELEASE.2024-09-13T20-26-02Z
    command: server --console-address ":9001" /data/minio/
    restart: always
    volumes:
      - minio:/data/
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-username}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password}
    networks:
      - gateway_net

  nginx:
    image: nginx:alpine
    container_name: fivexer-nginx
    restart: always
    ports:
      - '9000:9000' # MinIO API port
      - '9001:9001' # MinIO Console port
      - '9090:9090' # Keep the original 9090 port mapping
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - minio

  search-service:
    build: ./packages/services/search
    container_name: search-service
    depends_on:
      vespa:
        condition: service_healthy
    environment:
      VESPA_ENDPOINT: http://vespa:8080
      VESPA_DEPLOY_ENDPOINT: http://vespa:19071
      APP_ID: demo-app
      SEARCH_AUTO_DEPLOY: 'true'
      SEARCH_DEFAULT_TENSOR_DIM: 8
      SEARCH_DEFAULT_GEO_ENABLED: 'true'
    ports:
      - '8088:8088'
    networks:
      - gateway_net

  embeddings-service:
    build: ./packages/services/embeddings
    container_name: embeddings-service
    environment:
      - PORT=9002
    ports:
      - '8090:9002'
    networks:
      - gateway_net

  ingestion-service:
    build:
      context: .
      dockerfile: packages/services/ingestion/Dockerfile
    container_name: ingestion-service
    depends_on:
      - mongo
      - redis
      - search-service
      - embeddings-service
    environment:
      PORT: 8089
      MONGODB_URI: mongodb://root:password@mongodb:27017/ingestion?authSource=admin
      DATABASE_NAME: ingestion
      MONGODB_RETRY_WRITES: 'false'
      REDIS_URL: redis://gateway-redis:6379
      SEARCH_SERVICE_URL: http://search-service:8088
      EMBEDDINGS_SERVICE_URL: http://embeddings-service:9002
      HTTP_TIMEOUT_MS: 30000
      HTTP_USER_AGENT: ingestion-service/1.0
      ENABLE_SCHEDULER: 'true'
      DEFAULT_BATCH_SIZE: 1000
      MAX_CONCURRENT_SYNCS: 5
      RUST_LOG: info
    ports:
      - '8089:8089'
    networks:
      - gateway_net

  records-service:
    build:
      context: .
      dockerfile: packages/services/records/Dockerfile
    container_name: records-service
    depends_on:
      - mongo
    environment:
      MONGODB_URI: mongodb://root:password@mongodb:27017/records?authSource=admin
      DATABASE_NAME: records
      SERVER_PORT: 8080
      RUST_LOG: info
    ports:
      - '8080:8080'
    networks:
      - gateway_net
