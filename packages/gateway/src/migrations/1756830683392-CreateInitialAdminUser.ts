import * as bcrypt from 'bcrypt';
import * as dotenv from 'dotenv';
import * as fs from 'fs';
import * as path from 'path';
import { MigrationInterface, QueryRunner } from 'typeorm';

function loadEnvFromFiles() {
  try {
    if (process.env.NODE_ENV === 'test') return; // don't load .env files during tests
    const root = path.resolve(__dirname, '..', '..');
    const envLocal = path.join(root, '.env.local');
    const env = path.join(root, '.env');
    if (fs.existsSync(envLocal)) dotenv.config({ path: envLocal });
    if (fs.existsSync(env)) dotenv.config({ path: env });
  } catch {
    // best-effort only
  }
}

export class CreateInitialAdminUser1756830683392 implements MigrationInterface {
  name = 'CreateInitialAdminUser1756830683392';

  public async up(queryRunner: QueryRunner): Promise<void> {
    // Best-effort: load env from .env.local/.env when running via CLI without script wrappers
    if (!process.env.ADMIN_EMAIL || !process.env.ADMIN_PASSWORD) {
      loadEnvFromFiles();
    }
    // Normalize env vars
    const rawEmail = process.env.ADMIN_EMAIL || '';
    const rawPassword = process.env.ADMIN_PASSWORD || '';
    const adminEmail = rawEmail.trim();
    const adminPassword = rawPassword.trim();

    // If required env vars are missing, skip creating the initial admin user.
    // Migrations should be data/structure focused and not fail due to missing runtime configuration.
    if (!adminEmail || !adminPassword) {
      console.log(
        'CreateInitialAdminUser1756830683392: Missing ADMIN_EMAIL or ADMIN_PASSWORD in environment, skipping admin user creation.'
      );
      return;
    }

    // Check if admin user already exists
    const existingAdmin = await queryRunner.query(
      `SELECT id FROM "user" WHERE email = $1 LIMIT 1`,
      [adminEmail]
    );
    if (existingAdmin.length > 0) {
      console.log('Admin user already exists, skipping creation');
      return;
    }

    // Hash the password
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(adminPassword, saltRounds);

    // Create admin user (id generated by DEFAULT uuid_generate_v4())
    await queryRunner.query(
      `INSERT INTO "user" (
                email,
                password,
                permissions,
                "isEmailVerified",
                "failedLoginAttempts",
                "createdAt",
                "updatedAt"
            ) VALUES (
                $1,
                $2,
                $3,
                true,
                0,
                NOW(),
                NOW()
            )
            ON CONFLICT (email) DO NOTHING`,
      [adminEmail, hashedPassword, 'admin,user']
    );

    console.log(`‚úÖ Created initial admin user: ${adminEmail}`);
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    const adminEmail = (process.env.ADMIN_EMAIL || '').trim();
    if (!adminEmail) {
      console.log('ADMIN_EMAIL not set, skipping admin user removal');
      return;
    }
    // Remove the admin user
    await queryRunner.query(`DELETE FROM "user" WHERE email = $1`, [
      adminEmail,
    ]);

    console.log(`üóëÔ∏è  Removed admin user: ${adminEmail}`);
  }
}
